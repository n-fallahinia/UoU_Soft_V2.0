// generated by Fast Light User Interface Designer (fluid) version 1.0110

#ifndef main_h
#define main_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <stdio.h>
extern Fl_Double_Window *control_window;
#include <FL/glut.H>
#include <FL/gl.h>
#include "Plot2DView.h"
extern Plot2DView *box_maglev_rotation;
#include "Graph3DAxis.h"
extern Graph3DAxis *box_maglev_position;
#include "CubeView.h"
extern CubeView *display_force;
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
extern Fl_Group *maglev_position;
extern Fl_Group *position_gain_sliders;
extern Fl_Group *position_gain_sliders_x;
#include <FL/Fl_Value_Slider.H>
extern Fl_Value_Slider *position_gain_x_P;
extern Fl_Value_Slider *position_gain_x_I;
extern Fl_Value_Slider *position_gain_x_D;
extern Fl_Group *position_gain_sliders_y;
extern Fl_Value_Slider *position_gain_y_P;
extern Fl_Value_Slider *position_gain_y_I;
extern Fl_Value_Slider *position_gain_y_D;
extern Fl_Group *position_gain_sliders_z;
extern Fl_Value_Slider *position_gain_z_P;
extern Fl_Value_Slider *position_gain_z_I;
extern Fl_Value_Slider *position_gain_z_D;
extern Fl_Group *rotation_gain_sliders_x;
extern Fl_Value_Slider *rotation_gain_x_P;
extern Fl_Value_Slider *rotation_gain_x_I;
extern Fl_Value_Slider *rotation_gain_x_D;
extern Fl_Group *rotation_gain_sliders_y;
extern Fl_Value_Slider *rotation_gain_y_P;
extern Fl_Value_Slider *rotation_gain_y_I;
extern Fl_Value_Slider *rotation_gain_y_D;
extern Fl_Group *rotation_gain_sliders_z;
extern Fl_Value_Slider *rotation_gain_z_P;
extern Fl_Value_Slider *rotation_gain_z_I;
extern Fl_Value_Slider *rotation_gain_z_D;
#include <FL/Fl_Button.H>
#include "MaglevControl.h"
extern Fl_Button *button_maglev_connect_separate;
extern Fl_Button *button_maglev_lift_land_separate;
extern Fl_Value_Slider *slider_maglev_frequency;
#include <FL/Fl_Check_Button.H>
extern Fl_Check_Button *check_calibrate_thumb_separate;
extern Fl_Group *demo_buttons;
#include <FL/Fl_Box.H>
#include <unistd.h>
extern Fl_Group *force_controller;
extern Fl_Group *force_gain_sliders;
extern Fl_Group *force_gain_sliders_x;
extern Fl_Value_Slider *force_gain_x_P;
extern Fl_Value_Slider *force_gain_x_I;
extern Fl_Value_Slider *force_gain_x_D;
extern Fl_Group *force_gain_sliders_y;
extern Fl_Value_Slider *force_gain_y_P;
extern Fl_Value_Slider *force_gain_y_I;
extern Fl_Value_Slider *force_gain_y_D;
extern Fl_Group *force_gain_sliders_z;
extern Fl_Value_Slider *force_gain_z_P;
extern Fl_Value_Slider *force_gain_z_I;
extern Fl_Value_Slider *force_gain_z_D;
extern Fl_Group *target_forces;
extern Fl_Value_Slider *desired_force_x;
extern Fl_Value_Slider *desired_force_y;
extern Fl_Value_Slider *desired_force_z;
extern Fl_Group *target_positions;
extern Fl_Value_Slider *desired_position_x;
extern Fl_Value_Slider *desired_position_y;
extern Fl_Value_Slider *desired_position_z;
extern Fl_Value_Slider *desired_rotation_x;
extern Fl_Value_Slider *desired_rotation_y;
extern Fl_Value_Slider *desired_rotation_z;
#include <iostream>
extern Fl_Button *start_force_controller_separate;
extern Fl_Group *system_id;
extern Fl_Value_Slider *slide_force_magnitude;
extern Fl_Value_Slider *slide_force_power;
#include <FL/Fl_Text_Display.H>
extern Fl_Text_Display *force_frequency;
extern Fl_Group *camera_control;
extern Fl_Group *camera_settings;
extern Fl_Value_Slider *camera_brightness;
extern Fl_Value_Slider *camera_exposure;
extern Fl_Value_Slider *camera_gamma;
extern Fl_Value_Slider *camera_shutter;
extern Fl_Value_Slider *camera_framerate;
extern Fl_Value_Slider *camera_gain;
extern Fl_Button *camera_load_settings;
extern Fl_Button *camera_save_settings;
#include "CameraControl.h"
extern Fl_Button *button_start_camera_separate;
extern Fl_Button *button_record;
extern Fl_Group *training_trajectories;
#include <FL/Fl_File_Browser.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/Fl_Input.H>
extern Fl_Input *training_file_name_separate;
#include "Training.h"
extern Fl_Button *read_trajectory_file_separate;
extern Fl_Group *all_together;
#include "ImageDisplay.h"
extern ImageDisplay *image_display_m;
extern Fl_Input *training_file_name;
#include <FL/Fl_Progress.H>
extern Fl_Progress *training_progress;
extern Fl_Check_Button *check_calibrate_thumb;
extern Fl_Button *button_maglev_connect;
extern Fl_Button *button_maglev_lift_land;
extern Fl_Button *button_start_camera;
extern Fl_Button *choose_trajectory_file;
extern Fl_Button *read_trajectory_file;
extern Fl_Button *start_force_controller;
extern Fl_Button *start_training;
extern Fl_Double_Window *PopupCameraWindow;
int main();
void force_control_parameter_update(Fl_Widget* o, void*);
void position_control_parameter_update(Fl_Widget* o, void*);
extern ForceSensor force_sensor_m; 
void forceSensorReading(void *);
extern MaglevControl maglev_m; 
int tick_callback_handler( ml_device_handle_t device_handler,  ml_position_t *maglev_position );
void maglevPositionReading(void *);
void demo_callback(void *);
void displayImage(void *);
void takeImage(void *);
void fileChooserCallback(Fl_File_Chooser* o, void* v);
void trainingRecord(void *);
#endif
